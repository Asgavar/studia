<?phpnamespace ReversePolishNotation;use ReversePolishNotation\DataStructures\Stack;use ReversePolishNotation\Functors\RpnFunctor;use ReversePolishNotation\Tokenizers\Tokenizer;class RPNCalculator{    /**     * @var array     */    private $functors;    /**     * @var Stack     */    private $stack;    /**     * @var Tokenizer     */    private $tokenizer;    public function __construct(Tokenizer $tokenizer, RpnFunctor ...$functors)    {        $this->stack = new Stack();        $this->functors = [];        $this->tokenizer = $tokenizer;        foreach ($functors as $functor)        {            array_push($this->functors, $functor);        }    }    public function evaluate(String $input): int    {        $tokens = $this->tokenizer->tokenize($input);        foreach ($tokens as $token)        {            if (is_numeric($token))            {                $this->stack->push($token);            }            else {                foreach ($this->functors as $func)                {                    if ($func->doesSymbolReferTo($token))                    {                        $operands = $this->takeValuesFromStack($func->getArity());                        $operands = array_reverse($operands);                        /* czy to na pewno powinno tak wyglądać? xD */                        $this->stack->push(//                            call_user_func(array($func, "evaluate"), $operands)                            $func->evaluate(...$operands)                        );                        break;                    }                }            }        }        return $this->stack->pop();    }    private function takeValuesFromStack(int $howMany): array    {        $ret = [];        while ($howMany > 0)        {            array_push($ret, $this->stack->pop());            --$howMany;        }        return $ret;    }}